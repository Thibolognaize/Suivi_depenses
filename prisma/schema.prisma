datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_DEV")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

// Modèles pour NextAuth
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  ext_expires_in     Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

// Modèles pour l'application
model Categorie {
  id       Int        @id @default(autoincrement())
  nom      String     @unique(map: "Categorie_nom_key")
  commande Commande[]

  @@map("categorie")
}

model Entite {
  id       Int        @id @default(autoincrement())
  nom      String     @unique(map: "Entite_nom_key")
  commande Commande[]
  collaborateur     Collaborateur[]

  @@map("entite")
}

model Fournisseur {
  id       Int        @id @default(autoincrement())
  nom      String     @unique(map: "Fournisseur_nom_key")
  commande Commande[]

  @@map("fournisseur")
}

model Collaborateur {
  id                 Int         @id @default(autoincrement())
  nom                String
  prenom             String
  email              String     @unique
  role               CollabRole    @default(utilisateur)
  entiteId           Int
  isActive           Boolean      @default(true)
  date_creation      DateTime     @default(now())
  derniere_connexion DateTime?

  commandes_initiees   Commande[] @relation("CommandeInitiateur")
  commandes_utilisees  Commande[] @relation("CommandeUtilisateur")
  entite              Entite     @relation(fields: [entiteId], references: [id], onDelete: Cascade)
  validations         Validation[]

  @@index([entiteId], map: "Collaborateur_entiteId_fkey")

  @@map("collaborateur")
}

model Commande {
  id                Int           @id @default(autoincrement())
  libelle           String
  quantite           Int
  montant            Decimal      @db.Decimal(10, 2)
  ref_facture       String?       @unique
  commentaire       String?
  date_creation     DateTime      @default(now())
  date_modification  DateTime      @default(now()) @updatedAt

  entiteId          Int
  fournisseurId     Int
  initiateurId      Int
  utilisateurId     Int
  categorieId       Int

  etat              CommandeEtat @default(commande)

  categorie    Categorie @relation(fields: [categorieId], references: [id], onDelete: Cascade)
  entite       Entite   @relation(fields: [entiteId], references: [id], onDelete: Cascade)
  fournisseur  Fournisseur @relation(fields: [fournisseurId], references: [id], onDelete: Cascade)

  initiateur   Collaborateur @relation("CommandeInitiateur", fields: [initiateurId], references: [id], onDelete: Cascade)
  utilisateur Collaborateur @relation("CommandeUtilisateur", fields: [utilisateurId], references: [id], onDelete: Cascade)

  validation   Validation?

  @@index([categorieId])
  @@index([entiteId])
  @@index([fournisseurId])
  @@index([initiateurId])
  @@index([utilisateurId])

  @@map("commande")
}

model Validation {
  id              Int               @id @default(autoincrement())
  commandeId      Int               @unique
  statut          ValidationStatut
  date_validation DateTime
  validateur_id   Int
  commentaire     String?

  commande    Commande @relation(fields: [commandeId], references: [id], onDelete: Cascade)
  validateur  Collaborateur @relation(fields: [validateur_id], references: [id], onDelete: Cascade)

  @@index([validateur_id])

  @@map("validation")
}

// Énumérations pour les différents statuts
enum CollabRole {
  admin
  associe
  utilisateur
}

enum CommandeEtat {
  commande
  expedie
  recu
  retourne
}

enum ValidationStatut {
  en_attente
  approuve
  refuse
}
